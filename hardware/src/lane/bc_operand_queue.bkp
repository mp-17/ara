module bc_operand_queue import ara_pkg::*; #(
    parameter  int          Lane0      = 0,
    parameter  int unsigned NrLanes    = 0
  ) (
    input  logic                           clk_i,
    input  logic                           rst_ni,
    // Interface with the previous lane / Broadcast Buffer
    output logic                           bc_ready_o,
    input  elen_t                          bc_data_i,
    input  logic                           bc_valid_i,
    // Interface with the next lane
    input  logic                           bc_ready_i,
    output elen_t                          bc_data_o,
    output logic                           bc_valid_o,
    // Interface with VMFPU (TODO: INT support)
    input  logic                           bc_vmfpu_ready_i,
    output elen_t                          bc_vmfpu_data_o,
    output logic                           bc_vmfpu_valid_o
  );

  logic  bc_op_buffer_push, bc_op_buffer_pop;
  logic  bc_op_buffer_full, bc_op_buffer_empty;

  logic data_stored_d, data_stored_q;

  fifo_v3 #(
    .DEPTH(2     ),
    .dtype(elen_t)
  ) i_bc_op_buffer(
    .clk_i     (clk_i              ),
    .rst_ni    (rst_ni             ),
    .flush_i   (1'b0               ),
    .testmode_i(1'b0               ),
    .data_i    (bc_data_i          ),
    .push_i    (bc_op_buffer_push  ),
    .full_o    (bc_op_buffer_full  ),
    .data_o    (bc_data_o          ),
    .pop_i     (bc_op_buffer_pop   ),
    .empty_o   (bc_op_buffer_empty ),
    .usage_o   (/* Unused*/        )
  );

  elen_t bc_vmfpu_data;
  logic  bc_vmfpu_valid, bc_vmfpu_ready;

  spill_register #(
    .T(elen_t),
    .Bypass(Lane0)
  ) i_bc_spill_register (
    .clk_i  (clk_i             ),
    .rst_ni (rst_ni            ),
    .valid_i(bc_vmfpu_valid    ),
    .ready_o(bc_vmfpu_ready    ),
    .data_i (bc_vmfpu_data     ),
    .valid_o(bc_vmfpu_valid_o  ),
    .ready_i(bc_vmfpu_ready_i  ),
    .data_o (bc_vmfpu_data_o   )
  );

  assign bc_vmfpu_data = bc_data_i;
  assign bc_valid_o      = ~bc_op_buffer_empty;

  always_comb begin
    bc_ready_o = 1'b0;
    bc_op_buffer_push = 1'b0;
    bc_op_buffer_pop = 1'b0;

    bc_vmfpu_valid = 1'b0;//bc_valid_i;

    data_stored_d = data_stored_q;

    if (bc_valid_i && ~bc_op_buffer_full && ~data_stored_q) begin
      bc_vmfpu_valid = 1'b1;
      bc_op_buffer_push = 1'b1;
      if (bc_vmfpu_ready) begin
        // Ackownledge the data
        bc_ready_o = 1'b1;
      end else begin
        // current lane is not ready
        // Mark this data as stored
        data_stored_d = 1'b1;
      end
    end

    if (data_stored_q) begin
      bc_vmfpu_valid = 1'b1;
      // Clear if last data is stored
      if (bc_vmfpu_ready) begin
        data_stored_d = 1'b0;
        bc_ready_o = 1'b1;
      end
    end

    if (~bc_op_buffer_empty && bc_ready_i)
      bc_op_buffer_pop = 1'b1;
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if(~rst_ni) begin
      data_stored_q <= 1'b0;
    end else begin
      data_stored_q <= data_stored_d;
    end
  end

endmodule : bc_operand_queue

